y <- move(pos, str)
y
move(pos, 3)
str
move(pos, str)
str == 3
class(str)
class(str[1])
class(str[1,1])
str <- stratlist[state == st, 2, with = FALSE] %>% as.numeric
str
y <- move(pos, str)
y
score <- score - (y[2] * 5) # penalty
score
score <- 10
score <- score - (y[2] * 5) # penalty
score
pos <- y[1]
pos
source('C:/Users/chris/Documents/GitHub/cas/robby3.R', echo=TRUE)
stratlist
g1[, .(state, strat001)]
g1[, .(state, strat001)] %>% checkStrat
x
cantable[, can := sample(c(0,1), 100, replace = TRUE)]
score <- 0
pos <- 1
for(mv in 1:nmoves){
st <- getState(pos, cantable)
str <- stratlist[state == st, 2, with = FALSE] %>% as.numeric
if(str == 5){
ifelse(cantable[pos, can] == 1, score <- score + 10, score <- score -2)
cantable[pos, can] <- 0
} else {
y <- move(pos, str)
score <- score - (y[2] * 5) # penalty
pos <- y[1]
}
}
nmoves = 200
for(mv in 1:nmoves){
st <- getState(pos, cantable)
str <- stratlist[state == st, 2, with = FALSE] %>% as.numeric
if(str == 5){
ifelse(cantable[pos, can] == 1, score <- score + 10, score <- score -2)
cantable[pos, can] <- 0
} else {
y <- move(pos, str)
score <- score - (y[2] * 5) # penalty
pos <- y[1]
}
}
score
checkStrat <- function(stratlist, nmoves = 200, cantable = x){
require(data.table)
# randomly distribute cans
cantable[, can := sample(c(0,1), 100, replace = TRUE)]
# initialize score
score <- 0
# always start at (1, 1)
pos <- 1
for(mv in 1:nmoves){
st <- getState(pos, cantable)
str <- stratlist[state == st, 2, with = FALSE] %>% as.numeric
if(str == 5){
ifelse(cantable[pos, can] == 1, score <- score + 10, score <- score -2)
cantable[pos, can] <- 0
} else {
y <- move(pos, str)
score <- score - (y[2] * 5) # penalty
pos <- y[1]
}
}
return(score)
}
checkStrat(g1[, .(state, strat001)], nmoves = 200, cantable = x)
cantable[pos, can]
cantable[pos, can] <- 0
cantable[pos, can = 0]
cantable[pos, can := 0]
checkStrat <- function(stratlist, nmoves = 200, cantable = x){
require(data.table)
# randomly distribute cans
cantable[, can := sample(c(0,1), 100, replace = TRUE)]
# initialize score
score <- 0
# always start at (1, 1)
pos <- 1
for(mv in 1:nmoves){
st <- getState(pos, cantable)
str <- stratlist[state == st, 2, with = FALSE] %>% as.numeric
if(str == 5){
ifelse(cantable[pos, can] == 1, score <- score + 10, score <- score -2)
cantable[pos, can := 0]
} else {
y <- move(pos, str)
score <- score - (y[2] * 5) # penalty
pos <- y[1]
}
}
return(score)
}
checkStrat(g1[, .(state, strat001)], nmoves = 200, cantable = x)
s <- stratlist[, .(state, 2)]
s
s <- stratlist[, .(1, 2), with = FALSE]
s <- stratlist[, c(1, 2), with = FALSE]
s
s <- stratlist[, c(1, 3), with = FALSE]
gen
g1
s <- g1[, c(1, 3), with = FALSE]
s
genscores <- rep(0, 100)
genscores
dim(g1)
st <- Sys.time()
genscores <- rep(0, 100)
for(strat in 2:101){
s <- g1[, c(1, i), with = FALSE]
genscores[i-1] <- checkStrat(s, nmoves = 200, cantable = x)
}
et <- Sys.time()
difftime(et, st)
genscores
score
bigscore <- rep(0, ntimes)
ntimes <- 10
bigscore <- rep(0, ntimes)
bigscore
checkStrat <- function(stratlist, nmoves = 200, ntimes = 10, cantable = x){
require(data.table)
bigscore <- rep(0, ntimes)
for(i in 1:ntimes){
# randomly distribute cans
cantable[, can := sample(c(0,1), 100, replace = TRUE)]
# initialize score
score <- 0
# always start at (1, 1)
pos <- 1
for(mv in 1:nmoves){
st <- getState(pos, cantable)
str <- stratlist[state == st, 2, with = FALSE] %>% as.numeric
if(str == 5){
ifelse(cantable[pos, can] == 1, score <- score + 10, score <- score -2)
cantable[pos, can := 0]
} else {
y <- move(pos, str)
score <- score - (y[2] * 5) # penalty
pos <- y[1]
}
}
bigscore[i] <- score
}
return(bigscore)
}
i
s
checkStrat(s, nmoves = 200, ntimes = 10, cantable = x)
genscores[i-1] <- mean(checkStrat(s, nmoves = 200, ntimes = 10, cantable = x))
gebscores[i-1]
genscores[i-1]
sprintf("checking fitness rep %s", i)
sprintf("checking fitness rep %s of %s", i, ntimes)
verbose = TRUE
if(verbose) print("verbose on!")
length(genscores)
sprintf("Running strategy %s of %s", i-1, length(genscores))
st <- Sys.time()
genscores <- rep(0, 100)
for(i in 2:101){
s <- g1[, c(1, i), with = FALSE]
sprintf("Running strategy %s of %s", i-1, length(genscores))
genscores[i-1] <- mean(checkStrat(s, nmoves = 200, ntimes = 10, cantable = x, verbose = TRUE))
}
et <- Sys.time()
difftime(et, st)
checkStrat <- function(stratlist, nmoves = 200, ntimes = 10, cantable = x, verbose = FALSE){
require(data.table)
bigscore <- rep(0, ntimes)
for(i in 1:ntimes){
if(verbose) cat(sprintf("[%s of %s]...", i, ntimes))
# randomly distribute cans
cantable[, can := sample(c(0,1), 100, replace = TRUE)]
# initialize score
score <- 0
# always start at (1, 1)
pos <- 1
for(mv in 1:nmoves){
st <- getState(pos, cantable)
str <- stratlist[state == st, 2, with = FALSE] %>% as.numeric
if(str == 5){
ifelse(cantable[pos, can] == 1, score <- score + 10, score <- score -2)
cantable[pos, can := 0]
} else {
y <- move(pos, str)
score <- score - (y[2] * 5) # penalty
pos <- y[1]
}
}
bigscore[i] <- score
}
return(bigscore)
}
st <- Sys.time()
genscores <- rep(0, 100)
for(i in 2:101){
s <- g1[, c(1, i), with = FALSE]
sprintf("Running strategy %s of %s", i-1, length(genscores))
genscores[i-1] <- mean(checkStrat(s, nmoves = 200, ntimes = 10, cantable = x, verbose = TRUE))
}
genscores
source('C:/Users/chris/Documents/GitHub/cas/robby3.R', echo=TRUE)
genscores
state
genscores <- data.table(strat = 1:100, score = genscores)
genscores
genscores <- genscores[, order(score)]
genscores
genscores
score
?order
g <- makeGen(state, n = 100)
genscores <- data.table(strat = 1:100, score = rep(0.0, 100))
for(i in 2:101){
s <- g[, c(1, i), with = FALSE]
print(sprintf("Running strategy %s of %s", i-1, length(genscores)))
genscores$score[i-1] <- mean(checkStrat(s, nmoves = 200, ntimes = 10, cantable = x, verbose = FALSE))
}
# choose two and create two offspring
setorder(genscores, score, order = -1L)
genscores
setorder(genscores, c(score, strat), order = -1L)
setorderv(genscores, score, order = -1L)
setorderv(genscores, c(score), order = -1L)
setorderv(genscores, c("score"), order = -1L)
genscores
10:1
sum(100:1)
genscores[, pr := 100:1 / 5050]
genscores
10:1^2
10:1 %>% .^2
genscores[, pr := 100:1 %>% .^2]
genscores
genscores[, pr := (100:1 %>% .^2)/sum(100:1 %>% .^2)]
genscores[, sum(pr)]
genscores
genscores[, pr := NULL]
10:1 / sum(10:1)
(10:1 %>% .^2) %>% print(.)
(10:1 %>% .^2) %>% divided_by(sum(.))
(10:1 %>% .^2) %>% divide_by(sum(.))
probs <- (10:1 %>% .^2) %>% divide_by(sum(.))
probs
probs <- (100:1 %>% .^2) %>% divide_by(sum(.))
probs
genscores
sample(genscores[, strat], 2, probs = probs)
?samplpe
?sample
sample(genscores[, strat], 2, prob = probs)
sample(genscores[, strat], 2, prob = probs)[1]
sample(genscores[, strat], 2, prob = probs)[2]
sample(genscores[, strat], 2, prob = probs)
p <- sample(genscores[, strat], 2, prob = probs)
c1 <- g[p[1], strat]
cq
c1
g
?formatC
paste0("strat", formatC(p, width = 3, flag = "0"))
g
n
n <- paste0("strat", formatC(p, width = 3, flag = "0"))
n
g[, .(n[1])]
g[, c(n[1])]
g[, n[1]
]
g[, n[1]]
g[, .SDcols = n[1]]
n
n[1]
g$n[1]
n1
n
p
p
g[, .SDcols = c(p[1]+1)]
g[, p[1]+1, with = FALSE]
locus <- sample(2:242, 1)
c1 <- g[, p[1]+1, with = FALSE][1:locus]
c1
c1 <- c(g[, p[1]+1, with = FALSE][1:locus], g[, p[2]+1, with = FALSE][locus+1:243])
c1
g[, p[2]+1, with = FALSE][locus+1:243]
g[, p[2]+1, with = FALSE]
locus
g[, p[2]+1, with = FALSE][(locus+1):243]
c1 <- c(g[, p[1]+1, with = FALSE][1:locus], g[, p[2]+1, with = FALSE][(locus+1):243])
c1
c2 <- c(g[, p[2]+1, with = FALSE][1:locus], g[, p[1]+1, with = FALSE][(locus+1):243])
greenOoze <- function(s){
# because it mutates things
sample(c(incoming, 1, 2, 3, 4, 5),
1, prob = c(1-p, p/5, p/5, p/5, p/5, p/5))
}
c1 <- c(g[, p[1]+1, with = FALSE][1:locus], g[, p[2]+1, with = FALSE][(locus+1):243]) %>% greenOoze
greenOoze(c1)
c1
c2
c1 <- c(g[, (p[1]+1), with = FALSE][1:locus], g[, (p[2]+1), with = FALSE][(locus+1):243]) %>% greenOoze
c1 <- c(g[, (p[1]+1), with = FALSE][1:locus], g[, (p[2]+1), with = FALSE][(locus+1):243])
c1
p[1]
g[, p[1]+1, with = FALSE]
g[, p[1]+1, with = FALSE][1:locus]
g[, p[2]+1, with = FALSE][(locus+1):243]
118 + 125
c(g[, p[1]+1, with = FALSE][1:locus],
g[, p[2]+1, with = FALSE][(locus+1):243])
g[, p[1]+1, with = FALSE][1:locus]
c1 <- c(g[, p[1]+1, with = FALSE, drop = TRUE][1:locus],
g[, p[2]+1, with = FALSE][(locus+1):243])
c1
g[, p[1]+1, with = FALSE, drop = TRUE][1:locus]
g[, p[1]+1, with = FALSE][1:locus]
g[, p[1]+1, with = FALSE][1:locus] %>% class
g[, p[1]+1, with = FALSE][1:locus] %>% as.numeric
g[, p[1]+1, with = FALSE][1:locus] %>% as.integer()
g[, p[1]+1, with = FALSE][1:locus][1]
g[, p[1]+1, with = FALSE][1:locus][1,1]
g[, p[1]+1, with = FALSE][1:locus][,1]
g[[p[1]]]
c1 <- c(g[[p[1]]][1:locus], g[[p[2]]][(locus+1):243])
c1
c1 <- c(g[[p[1]]][1:locus], g[[p[2]]][(locus+1):243]) %>% greenOoze
c1 <- c(g[[p[1]]][1:locus], g[[p[2]]][(locus+1):243]) %>% sapply(greenOoze)
sapply(c1, greenOoze)
sapply(c1, greenOoze())
greenOoze(c1)
greenOoze <- function(s){
# because it mutates things
sample(c(s, 1, 2, 3, 4, 5),
1, prob = c(1-p, p/5, p/5, p/5, p/5, p/5))
}
greenOoze(c1)
sapply(c1, greenOoze)
sapply(c1, print)
class(c1)
c[1]
c1[1]
greenOoze(c1[1])
sample(c(c1[1], 1, 2, 3, 4, 5), 1)
sample(c(c1[1], 1, 2, 3, 4, 5), 1, prob = c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
p = 0.05
sample(c(c1[1], 1, 2, 3, 4, 5), 1, prob = c(1-p, p/5, p/5, p/5, p/5, p/5))
c(1-p, p/5, p/5, p/5, p/5, p/5) %>% sum
greenOoze <- function(s){
# because it mutates things
sample(c(s, 1, 2, 3, 4, 5),
1, prob = prob = c(1-p, p/5, p/5, p/5, p/5, p/5))
}
greenOoze <- function(s){
# because it mutates things
sample(c(s, 1, 2, 3, 4, 5),
1, prob = prob = c(1-p, p/5, p/5, p/5, p/5, p/5))
}
greenOoze <- function(s){
# because it mutates things
sample(c(s, 1, 2, 3, 4, 5),
1, prob = c(1-p, p/5, p/5, p/5, p/5, p/5))
}
greenOoze <- function(s, p = 0.05){
# because it mutates things
sample(c(s, 1, 2, 3, 4, 5),
1, prob = c(1-p, p/5, p/5, p/5, p/5, p/5))
}
greenOoze(c1[1])
greenOoze(c1)
sapply(c1, greenOoze)
c1 <- c(g[[p[1]]][1:locus], g[[p[2]]][(locus+1):243]) %>% sapply(greenOoze)
c2 <- c(g[[p[2]]][1:locus], g[[p[1]]][(locus+1):243]) %>% sapply(greenOoze)
c1
c2
g[[p[2]]]
p[2]
p <- sample(genscores[, strat], 2, prob = probs)
locus <- sample(2:242, 1)
c1 <- c(g[[p[1]]][1:locus], g[[p[2]]][(locus+1):243]) %>% sapply(greenOoze)
c2 <- c(g[[p[2]]][1:locus], g[[p[1]]][(locus+1):243]) %>% sapply(greenOoze)
c1
c2
j <- seq(1:100, 2)
j <- seq(1, 99, 2)
j
state
makeGen <- function(statelist, n = 100, populate = TRUE){
# create a random set of 100 strategies for all possible moves
require(data.table)
sl <- data.table(state = statelist)
colnamen <- paste0("strat", formatC(1:100, width = 3, format = "d", flag = "0"))
sl[, c(colnamen) := 0]
if(populate) sl[, c(colnamen) := (sample(c(1:5), length(statelist), replace = TRUE))]
return(sl)
}
state
j <- seq(2, 100, 2)
newGen <- makeGen(state, populate = FALSE)
j <- seq(2, 100, 2)
newGen[[2]] <- c1
newGen
newGen[, 1:2, with = FALSE]
newGen <- function(g, genscores){
ng <- makeGen(state, populate = FALSE)
j <- seq(2, 100, 2)
for(c in j){
p <- sample(genscores[, strat], 2, prob = probs)
locus <- sample(2:242, 1)
c1 <- c(g[[p[1]]][1:locus], g[[p[2]]][(locus+1):243]) %>% sapply(greenOoze)
c2 <- c(g[[p[2]]][1:locus], g[[p[1]]][(locus+1):243]) %>% sapply(greenOoze)
ng[[c]] <- c1
ng[[c+1]] <- c2
}
return(ng)
}
newGen <- function(g, genscores, verbose = FALSE){
ng <- makeGen(state, populate = FALSE)
j <- seq(2, 100, 2)
for(c in j){
if(verbose) cat(".")
p <- sample(genscores[, strat], 2, prob = probs)
locus <- sample(2:242, 1)
c1 <- c(g[[p[1]]][1:locus], g[[p[2]]][(locus+1):243]) %>% sapply(greenOoze)
c2 <- c(g[[p[2]]][1:locus], g[[p[1]]][(locus+1):243]) %>% sapply(greenOoze)
ng[[c]] <- c1
ng[[c+1]] <- c2
}
return(ng)
}
g1
g2 <- makenewGen(g1, genscores, verbose=TRUE)
g2 <- newGen(g1, genscores, verbose=TRUE)
g2
g2
genscores
allGens <- data.table(1 = g)
allGens <- data.table()
allGens[[1]] = g
allGens
g
genscores
allGens <- data.table(n = 1:200)
genScores <- function(gen){
genscores <- data.table(strat = 1:100, score = rep(0.0, 100))
for(i in 2:101){
s <- gen[, c(1, i), with = FALSE]
print(sprintf("Running strategy %s of %s", i-1, nrow(genscores)))
genscores$score[i-1] <- mean(checkStrat(s, nmoves = 200, ntimes = 10, cantable = x, verbose = FALSE))
}
return(genscores)
}
genScores(g)
genScores <- function(gen, verbose = FALSE){
# get the score for each strategy in the generation
genscores <- data.table(strat = 1:100, score = rep(0.0, 100))
for(i in 2:101){
s <- gen[, c(1, i), with = FALSE]
if(verbose) print(sprintf("Running strategy %s of %s", i-1, nrow(genscores)))
genscores$score[i-1] <- mean(checkStrat(s, nmoves = 200, ntimes = 10, cantable = x, verbose = FALSE))
}
setorderv(genscores, c("score"), order = -1L)setorderv(genscores, c("score"), order = -1L)
return(genscores)
}
genScores <- function(gen, verbose = FALSE){
# get the score for each strategy in the generation
genscores <- data.table(strat = 1:100, score = rep(0.0, 100))
for(i in 2:101){
s <- gen[, c(1, i), with = FALSE]
if(verbose) print(sprintf("Running strategy %s of %s", i-1, nrow(genscores)))
genscores$score[i-1] <- mean(checkStrat(s, nmoves = 200, ntimes = 10, cantable = x, verbose = FALSE))
}
setorderv(genscores, c("score"), order = -1L)
return(genscores)
}
allGens <- data.table(rank = 1:100)
g
genscores
allGens[[1]] <- genscores$score
allGens
allGens <- data.table(rank = 1:100)
allGens[[2]] <- genscores$score
allGens
as.numeric(1:10)
as.numeric(1:10) %>% class
as.character(1:10) %>% class
as.character(1:10)
allGens[, (as.character(1:100)) := 0]
allGens[, .(as.character(1:100)) := 0]
?evolve
library(data.table)
library(magrittr)
source('C:/Users/chris/Documents/GitHub/cas/robby3.R', echo=TRUE)
setwd("C:/Users/chris/Documents/GitHub/cas")
st <- Sys.time()
x <- evolve(gen = g, ngens = 100, v_gen = TRUE, v_score = FALSE)
saveRDS(x,"evolve_100.RDS")
et <- Sys.time()
print(difftime(et, st))
source('C:/Users/chris/Documents/GitHub/cas/robby3.R', echo=TRUE)
